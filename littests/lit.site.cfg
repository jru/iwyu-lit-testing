# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os

import lit.util
import lit.formats

# name: The name of this test suite.
config.name = 'IWYU test driver'

config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.cc']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate 'INCLUDE' through the environment.
# if 'INCLUDE' in os.environ:
#     config.environment['INCLUDE'] = os.environ['INCLUDE']

# Propagate 'LIB' through the environment.
# if 'LIB' in os.environ:
#     config.environment['LIB'] = os.environ['LIB']

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Propage user's PATH into the environment
config.environment['PATH'] = os.environ['PATH']

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

### IWYU stuffiness

# Find IWYU in the custom params dict
if not 'IWYU' in lit_config.params:
   lit_config.fatal("Please specify the directory to the include-what-you-use tool in the param 'IWYU'. e.g. -DIWYU=/usr/bin/")

iwyu_dir = os.path.abspath(lit_config.params['IWYU'])
iwyu_exe = os.path.join(iwyu_dir, 'include-what-you-use')

if not lit.util.which(iwyu_exe):
    lit_config.fatal("Cannot find IWYU in the directory '%s'" % iwyu_dir)

wrap_py = os.path.join(config.test_source_root, '..', 'utils', 'wrap.py')
iwyu_wrapped_exe = '{} {} {}'.format(sys.executable, wrap_py, iwyu_exe)
config.substitutions.append(('%iwyu', iwyu_wrapped_exe))

# Find OutputCheck
OutputCheckTool = 'OutputCheck'
if not lit.util.which(OutputCheckTool):
    lit_config.fatal('Cannot find OutputCheck executable in your PATH')

# Note: The current PyPi version does not recognise .cc. Thus, the explicit comment format is needed
output_check_exe = '{} --check-prefix=IWYU --comment=//'.format(OutputCheckTool)

config.substitutions.append(('%chk', output_check_exe))

# Add substitution for removing directories
# if os.name == 'posix':
#     rmdirCmd = 'rm -rf'
# elif os.name == 'nt':
#     # For windows there is no tool to remove directories that won't report an error
#     # if the directory does not exist so we provide our own python script for this case
#     rmdirCmd = sys.executable + ' ' + os.path.join(repositoryRoot, 'utils', 'rmdir.py')
# else:
#     lit_config.fatal('Unsupported platform: {}'.format(os.name))

# config.substitutions.append( ('%rmdir', rmdirCmd))

# # Add substitution for not utility
# notTool = os.path.join(repositoryRoot, 'utils', 'not.py')

# if os.name == 'nt':
#     notTool = sys.executable + ' ' + notTool

# config.substitutions.append( ('%not', notTool))
